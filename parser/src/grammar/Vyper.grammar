file_input: module_stmt+ ENDMARKER
module_stmt: import_stmt | type_def | contract_def

########################### import_stmt ##############################

import_stmt: (simple_import | from_import) NEWLINE

simple_import: 'import' (simple_import_name (',' simple_import_name)*)
simple_import_name: dotted_name ['as' NAME]

# Note: the ('.' | '...') is necessary because '...' is tokenized as a single
# OP token (an ellipsis OP)
from_import: from_import_parent_alt | from_import_sub_alt

from_import_parent_alt: 'from' ('.' | '...')+ 'import' from_import_names
from_import_sub_alt: 'from' from_import_sub_path 'import' from_import_names

from_import_sub_path: ('.' | '...')* dotted_name
from_import_names: '*' | '(' from_import_names_list ')' | from_import_names_list
from_import_names_list: from_import_name (',' from_import_name)* [',']
from_import_name: NAME ['as' NAME]

########################### type_def #################################

type_def: 'type' NAME '=' compound_type NEWLINE

########################### contract_def #############################

contract_def:
    'contract' NAME ':' NEWLINE
    INDENT
    contract_stmt+
    DEDENT

contract_stmt: field_def | event_def | func_def

field_def: [field_qual] NAME ':' compound_type NEWLINE

event_def:
    'event' NAME ':' NEWLINE
    INDENT
    event_field_def+
    DEDENT
event_field_def: [event_field_qual] NAME ':' compound_type NEWLINE

func_def:
    [func_qual] 'def' NAME '(' [arg_list] ')' ['->' base_type] ':' NEWLINE
    INDENT
    func_stmt+
    DEDENT
arg_list: compound_type (',' compound_type)* [',']
arg_def: NAME ':' compound_type

compound_type: map_type | base_type
map_type: 'map' '[' compound_type ',' compound_type ']' [arr_list]
base_type: NAME [arr_list]
arr_list: ('[' const_expr ']')+

field_qual: 'const' | 'pub'
event_field_qual: 'idx'
func_qual: 'pub'

func_stmt: pass_stmt NEWLINE

pass_stmt: 'pass'

########################### const_expr ###############################

const_expr: const_term ('+' const_term | '-' const_term)*
const_term: const_factor ('*' const_factor | '/' const_factor | '%' const_factor)*
const_factor: ('+' | '-' | '~') const_factor | const_power
const_power: const_atom '**' const_factor | const_atom

const_atom: const_group | NAME | NUMBER

const_group: '(' const_expr ')'

########################### common ###################################

dotted_name: NAME ('.' NAME)*
