var searchIndex = JSON.parse('{\
"fe":{"doc":"Fe is an emerging smart contract language for the Ethereum…","i":[[5,"main","fe","",null,[[]]]],"p":[]},\
"fe_compiler":{"doc":"Modules for compiling Fe and building ABIs.","i":[[0,"abi","fe_compiler","Fe to ABI builder.",null,null],[5,"build","fe_compiler::abi","Builds the appropriate ABIs for a given source `&str`.",null,[[],[["moduleabis",3],["compileerror",3],["result",4]]]],[0,"utils","","",null,null],[5,"event_topic","fe_compiler::abi::utils","Formats the name and fields and calculates the 32 byte…",null,[[["string",3],["vec",3]],["string",3]]],[5,"func_selector","","Formats the name and params and calculates the 4 byte…",null,[[["string",3],["vec",3]],["string",3]]],[0,"elements","fe_compiler::abi","Elements used to define contract ABIs.",null,null],[3,"ModuleABIs","fe_compiler::abi::elements","Wrapper around a map of contract names to their ABIs.",null,null],[12,"contracts","","",0,null],[3,"Contract","","All public interfaces of a Fe contract.",null,null],[12,"events","","All events defined in a contract.",1,null],[12,"functions","","All public functions defined in a contract.",1,null],[3,"Event","","An event interface.",null,null],[12,"name","","The event\'s name.",2,null],[12,"typ","","The type of an event (Always \\\"event\\\").",2,null],[12,"fields","","All event fields.",2,null],[12,"anonymous","","True if the event was declared as anonymous.",2,null],[3,"EventField","","A single event field.",null,null],[12,"name","","The event field\'s name.",3,null],[12,"typ","","The type of an event (e.g. u256, address, bytes100,...)",3,null],[12,"indexed","","True if the field is part of the log’s topics, false if it…",3,null],[3,"Function","","A function interface.",null,null],[12,"name","","The function\'s name.",4,null],[12,"typ","","The type of a function (Function, Constructor, Receive,…",4,null],[12,"inputs","","All function inputs.",4,null],[12,"outputs","","All function outputs.",4,null],[3,"FuncInput","","A single function input.",null,null],[12,"name","","The input\'s name.",5,null],[12,"typ","","The input\'s type.",5,null],[3,"FuncOutput","","A single function output.",null,null],[12,"name","","The output\'s name.",6,null],[12,"typ","","The output\'s type.",6,null],[4,"FuncType","","The type of a public function.",null,null],[13,"Function","","",7,null],[13,"Constructor","","",7,null],[13,"Receive","","",7,null],[13,"Fallback","","",7,null],[4,"VarType","","The type of an event field or function input or output.",null,null],[13,"Uint256","","",8,null],[13,"Bool","","",8,null],[13,"Address","","",8,null],[13,"FixedBytes","","",8,null],[13,"FixedArray","","",8,null],[4,"StateMutability","","The mutability of a public function.",null,null],[13,"Pure","","",9,null],[13,"View","","",9,null],[13,"Nonpayable","","",9,null],[13,"Payable","","",9,null],[11,"new","","",0,[[]]],[11,"json","","Serialize the module into a JSON object that maps each…",0,[[],[["string",3],["compileerror",3],["result",4]]]],[11,"new","","",1,[[]]],[11,"json","","Serialize the contract into a valid JSON ABI.",1,[[],[["string",3],["compileerror",3],["result",4]]]],[0,"errors","fe_compiler","Errors returned by the compilers and ABI builder.",null,null],[3,"CompileError","fe_compiler::errors","List of errors encountered during compilation.",null,null],[12,"errors","","",10,null],[4,"ErrorKind","","Errors can either be an object or static reference.",null,null],[13,"StaticStr","","",11,null],[13,"Str","","",11,null],[11,"new","","",10,[[]]],[11,"static_str","","Create a single error with a static string.",10,[[]]],[11,"str","","Create a single error with a string object.",10,[[["string",3]]]],[0,"yul","fe_compiler","Fe to Yul compiler.",null,null],[3,"CompilerOutput","fe_compiler::yul","",null,null],[12,"tokens","","",12,null],[12,"ast","","",12,null],[12,"yul","","",12,null],[5,"compile","","Compiles Fe to Yul.",null,[[],[["compileroutput",3],["compileerror",3],["result",4]]]],[11,"from","fe_compiler::abi::elements","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","fe_compiler::errors","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","fe_compiler::yul","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","fe_compiler::errors","",10,[[["parseerror",3]]]],[11,"from","","",10,[[["tokenizeerror",3]]]],[11,"from","","",10,[[["error",3]]]],[11,"from","","",10,[[["error",4]]]],[11,"from","","",10,[[["semanticerror",4]]]],[11,"clone","fe_compiler::abi::elements","",0,[[],["moduleabis",3]]],[11,"clone","","",1,[[],["contract",3]]],[11,"clone","","",2,[[],["event",3]]],[11,"clone","","",3,[[],["eventfield",3]]],[11,"clone","","",4,[[],["function",3]]],[11,"clone","","",5,[[],["funcinput",3]]],[11,"clone","","",6,[[],["funcoutput",3]]],[11,"clone","","",7,[[],["functype",4]]],[11,"clone","","",8,[[],["vartype",4]]],[11,"clone","","",9,[[],["statemutability",4]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]],[11,"default","fe_compiler::errors","",10,[[]]],[11,"eq","fe_compiler::abi::elements","",0,[[["moduleabis",3]]]],[11,"ne","","",0,[[["moduleabis",3]]]],[11,"eq","","",1,[[["contract",3]]]],[11,"ne","","",1,[[["contract",3]]]],[11,"eq","","",2,[[["event",3]]]],[11,"ne","","",2,[[["event",3]]]],[11,"eq","","",3,[[["eventfield",3]]]],[11,"ne","","",3,[[["eventfield",3]]]],[11,"eq","","",4,[[["function",3]]]],[11,"ne","","",4,[[["function",3]]]],[11,"eq","","",5,[[["funcinput",3]]]],[11,"ne","","",5,[[["funcinput",3]]]],[11,"eq","","",6,[[["funcoutput",3]]]],[11,"ne","","",6,[[["funcoutput",3]]]],[11,"eq","","",7,[[["functype",4]]]],[11,"eq","","",8,[[["vartype",4]]]],[11,"ne","","",8,[[["vartype",4]]]],[11,"eq","","",9,[[["statemutability",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","fe_compiler::errors","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","fe_compiler::abi::elements","",8,[[["formatter",3]],[["result",4],["error",3]]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]]],"p":[[3,"ModuleABIs"],[3,"Contract"],[3,"Event"],[3,"EventField"],[3,"Function"],[3,"FuncInput"],[3,"FuncOutput"],[4,"FuncType"],[4,"VarType"],[4,"StateMutability"],[3,"CompileError"],[4,"ErrorKind"],[3,"CompilerOutput"]]},\
"fe_parser":{"doc":"","i":[[5,"get_parse_tokens","fe_parser","Tokenize the given source code in `source` and filter out…",null,[[],[["tokenizeerror",3],["result",4],["vec",3]]]],[0,"ast","","",null,null],[3,"Module","fe_parser::ast","",null,null],[12,"body","","",0,null],[3,"SimpleImportName","","",null,null],[12,"path","","",1,null],[12,"alias","","",1,null],[3,"FromImportName","","",null,null],[12,"name","","",2,null],[12,"alias","","",2,null],[3,"EventField","","",null,null],[12,"qual","","",3,null],[12,"name","","",3,null],[12,"typ","","",3,null],[3,"FuncDefArg","","",null,null],[12,"name","","",4,null],[12,"typ","","",4,null],[3,"Kwarg","","",null,null],[12,"name","","",5,null],[12,"value","","",5,null],[3,"Comprehension","","",null,null],[12,"target","","",6,null],[12,"iter","","",6,null],[12,"ifs","","",6,null],[4,"ModuleStmt","","",null,null],[13,"TypeDef","","",7,null],[12,"name","fe_parser::ast::ModuleStmt","",8,null],[12,"typ","","",8,null],[13,"SimpleImport","fe_parser::ast","",7,null],[12,"names","fe_parser::ast::ModuleStmt","",9,null],[13,"FromImport","fe_parser::ast","",7,null],[12,"path","fe_parser::ast::ModuleStmt","",10,null],[12,"names","","",10,null],[13,"ContractDef","fe_parser::ast","",7,null],[12,"name","fe_parser::ast::ModuleStmt","",11,null],[12,"body","","",11,null],[4,"TypeDesc","fe_parser::ast","",null,null],[13,"Base","","",12,null],[12,"base","fe_parser::ast::TypeDesc","",13,null],[13,"Array","fe_parser::ast","",12,null],[12,"typ","fe_parser::ast::TypeDesc","",14,null],[12,"dimension","","",14,null],[13,"Map","fe_parser::ast","",12,null],[12,"from","fe_parser::ast::TypeDesc","",15,null],[12,"to","","",15,null],[13,"Tuple","fe_parser::ast","",12,null],[12,"items","fe_parser::ast::TypeDesc","",16,null],[4,"FromImportPath","fe_parser::ast","",null,null],[13,"Absolute","","",17,null],[12,"path","fe_parser::ast::FromImportPath","",18,null],[13,"Relative","fe_parser::ast","",17,null],[12,"parent_level","fe_parser::ast::FromImportPath","",19,null],[12,"path","","",19,null],[4,"FromImportNames","fe_parser::ast","",null,null],[13,"Star","","",20,null],[13,"List","","",20,null],[4,"ContractStmt","","",null,null],[13,"ContractField","","",21,null],[12,"qual","fe_parser::ast::ContractStmt","",22,null],[12,"name","","",22,null],[12,"typ","","",22,null],[13,"EventDef","fe_parser::ast","",21,null],[12,"name","fe_parser::ast::ContractStmt","",23,null],[12,"fields","","",23,null],[13,"FuncDef","fe_parser::ast","",21,null],[12,"qual","fe_parser::ast::ContractStmt","",24,null],[12,"name","","",24,null],[12,"args","","",24,null],[12,"return_type","","",24,null],[12,"body","","",24,null],[4,"ContractFieldQual","fe_parser::ast","",null,null],[13,"Const","","",25,null],[13,"Pub","","",25,null],[4,"EventFieldQual","","",null,null],[13,"Idx","","",26,null],[4,"FuncQual","","",null,null],[13,"Pub","","",27,null],[4,"FuncStmt","","",null,null],[13,"Return","","",28,null],[12,"value","fe_parser::ast::FuncStmt","",29,null],[13,"VarDecl","fe_parser::ast","",28,null],[12,"target","fe_parser::ast::FuncStmt","",30,null],[12,"typ","","",30,null],[12,"value","","",30,null],[13,"Assign","fe_parser::ast","",28,null],[12,"targets","fe_parser::ast::FuncStmt","",31,null],[12,"value","","",31,null],[13,"AugAssign","fe_parser::ast","",28,null],[12,"target","fe_parser::ast::FuncStmt","",32,null],[12,"op","","",32,null],[12,"value","","",32,null],[13,"For","fe_parser::ast","",28,null],[12,"target","fe_parser::ast::FuncStmt","",33,null],[12,"iter","","",33,null],[12,"body","","",33,null],[12,"or_else","","",33,null],[13,"While","fe_parser::ast","",28,null],[12,"test","fe_parser::ast::FuncStmt","",34,null],[12,"body","","",34,null],[12,"or_else","","",34,null],[13,"If","fe_parser::ast","",28,null],[12,"test","fe_parser::ast::FuncStmt","",35,null],[12,"body","","",35,null],[12,"or_else","","",35,null],[13,"Assert","fe_parser::ast","",28,null],[12,"test","fe_parser::ast::FuncStmt","",36,null],[12,"msg","","",36,null],[13,"Emit","fe_parser::ast","",28,null],[12,"value","fe_parser::ast::FuncStmt","",37,null],[13,"Expr","fe_parser::ast","",28,null],[12,"value","fe_parser::ast::FuncStmt","",38,null],[13,"Pass","fe_parser::ast","",28,null],[13,"Break","","",28,null],[13,"Continue","","",28,null],[13,"Revert","","",28,null],[4,"Expr","","",null,null],[13,"Ternary","","",39,null],[12,"test","fe_parser::ast::Expr","",40,null],[12,"if_expr","","",40,null],[12,"else_expr","","",40,null],[13,"BoolOperation","fe_parser::ast","",39,null],[12,"left","fe_parser::ast::Expr","",41,null],[12,"op","","",41,null],[12,"right","","",41,null],[13,"BinOperation","fe_parser::ast","",39,null],[12,"left","fe_parser::ast::Expr","",42,null],[12,"op","","",42,null],[12,"right","","",42,null],[13,"UnaryOperation","fe_parser::ast","",39,null],[12,"op","fe_parser::ast::Expr","",43,null],[12,"operand","","",43,null],[13,"CompOperation","fe_parser::ast","",39,null],[12,"left","fe_parser::ast::Expr","",44,null],[12,"op","","",44,null],[12,"right","","",44,null],[13,"Attribute","fe_parser::ast","",39,null],[12,"value","fe_parser::ast::Expr","",45,null],[12,"attr","","",45,null],[13,"Subscript","fe_parser::ast","",39,null],[12,"value","fe_parser::ast::Expr","",46,null],[12,"slices","","",46,null],[13,"Call","fe_parser::ast","",39,null],[12,"func","fe_parser::ast::Expr","",47,null],[12,"args","","",47,null],[13,"List","fe_parser::ast","",39,null],[12,"elts","fe_parser::ast::Expr","",48,null],[13,"ListComp","fe_parser::ast","",39,null],[12,"elt","fe_parser::ast::Expr","",49,null],[12,"comps","","",49,null],[13,"Tuple","fe_parser::ast","",39,null],[12,"elts","fe_parser::ast::Expr","",50,null],[13,"Bool","fe_parser::ast","",39,null],[13,"Name","","",39,null],[13,"Num","","",39,null],[13,"Str","","",39,null],[13,"Ellipsis","","",39,null],[4,"Slice","","",null,null],[13,"Slice","","",51,null],[12,"lower","fe_parser::ast::Slice","",52,null],[12,"upper","","",52,null],[12,"step","","",52,null],[13,"Index","fe_parser::ast","",51,null],[4,"CallArg","","",null,null],[13,"Arg","","",53,null],[13,"Kwarg","","",53,null],[4,"BoolOperator","","",null,null],[13,"And","","",54,null],[13,"Or","","",54,null],[4,"BinOperator","","",null,null],[13,"Add","","",55,null],[13,"Sub","","",55,null],[13,"Mult","","",55,null],[13,"Div","","",55,null],[13,"Mod","","",55,null],[13,"Pow","","",55,null],[13,"LShift","","",55,null],[13,"RShift","","",55,null],[13,"BitOr","","",55,null],[13,"BitXor","","",55,null],[13,"BitAnd","","",55,null],[13,"FloorDiv","","",55,null],[4,"UnaryOperator","","",null,null],[13,"Invert","","",56,null],[13,"Not","","",56,null],[13,"UAdd","","",56,null],[13,"USub","","",56,null],[4,"CompOperator","","",null,null],[13,"Eq","","",57,null],[13,"NotEq","","",57,null],[13,"Lt","","",57,null],[13,"LtE","","",57,null],[13,"Gt","","",57,null],[13,"GtE","","",57,null],[13,"Is","","",57,null],[13,"IsNot","","",57,null],[13,"In","","",57,null],[13,"NotIn","","",57,null],[0,"builders","fe_parser","Parser factory functions (builders).",null,null],[5,"alt","fe_parser::builders","",null,[[["alt",8]]]],[5,"many1","","",null,[[]]],[5,"many0","","",null,[[]]],[5,"preceded","","",null,[[]]],[5,"terminated","","",null,[[]]],[5,"pair","","",null,[[]]],[5,"opt","","",null,[[]]],[5,"map","","",null,[[]]],[5,"verify","","",null,[[]]],[5,"separated","","Modify a parser to apply itself repeatedly while consuming…",null,[[]]],[5,"delimited","","Modify a parser to parse and discard left and right…",null,[[]]],[5,"op_expr_builder","","",null,[[]]],[8,"Alt","","",null,null],[10,"parse","","",58,[[["cursor",6]],["parseresult",6]]],[0,"errors","fe_parser","",null,null],[3,"ParseError","fe_parser::errors","",null,null],[4,"ErrorKind","","",null,null],[13,"StaticStr","","",59,null],[13,"Str","","",59,null],[13,"Eof","","",59,null],[11,"description","","",59,[[]]],[11,"new","","",60,[[["errorkind",4],["cursor",6]]]],[11,"static_str","","",60,[[["cursor",6]]]],[11,"str","","",60,[[["string",3],["cursor",6]]]],[11,"eof","","",60,[[["cursor",6]]]],[11,"push","","",60,[[["errorkind",4],["cursor",6]]]],[11,"format_debug","","Format an error into a debug trace message.",60,[[],["string",3]]],[11,"format_user","","Format an error into a user-facing error message.",60,[[],["string",3]]],[0,"parsers","fe_parser","",null,null],[4,"Tail","fe_parser::parsers","",null,null],[13,"Attr","","",61,null],[13,"Index","","",61,null],[13,"Call","","",61,null],[5,"next","","Parse next token in input.",null,[[["cursor",6]],[["token",3],["parseresult",6]]]],[5,"token","","Parse a token of a specific type.",null,[[["tokentype",4]]]],[5,"name_token","","Parse a name token.",null,[[["cursor",6]],[["token",3],["parseresult",6]]]],[5,"name","","Parse a name token containing a specific string.",null,[[]]],[5,"op_token","","Parse an op token.",null,[[["cursor",6]],[["token",3],["parseresult",6]]]],[5,"op","","Parse an op token containing a specific string.",null,[[]]],[5,"number_token","","Parse a number token.",null,[[["cursor",6]],[["token",3],["parseresult",6]]]],[5,"string_token","","Parse a string token.",null,[[["cursor",6]],[["token",3],["parseresult",6]]]],[5,"indent_token","","Parse an indent token.",null,[[["cursor",6]],[["token",3],["parseresult",6]]]],[5,"dedent_token","","Parse a dedent token.",null,[[["cursor",6]],[["token",3],["parseresult",6]]]],[5,"newline_token","","Parse a grammatically significant newline token.",null,[[["cursor",6]],[["token",3],["parseresult",6]]]],[5,"endmarker_token","","Parse an endmarker token.",null,[[["cursor",6]],[["token",3],["parseresult",6]]]],[5,"file_input","","Parse a module definition.",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"empty_file_input","","Parse an empty module definition.",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"non_empty_file_input","","Parse a non-empty module definition.",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"module_stmt","","Parse a module statement, such as a contract definition.",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"import_stmt","","Parse an import statement.",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"simple_import","","Parse an import statement beginning with the \\\"import\\\"…",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"simple_import_name","","",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"from_import","","Parse an import statement beginning with the \\\"from\\\" keyword.",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"from_import_parent_alt","","Parse a \\\"from\\\" import with a path that contains only…",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"from_import_sub_alt","","Parse a \\\"from\\\" import with a path that contains sub module…",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"from_import_sub_path","","Parse a path containing sub module components in a \\\"from\\\"…",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"from_import_names","","Parse the names to be imported by a \\\"from\\\" import statement.",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"from_import_names_star","","Parse a wildcard token (\\\"*\\\") in a \\\"from\\\" import statement.",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"from_import_names_parens","","Parse a parenthesized list of names to be imported by a…",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"from_import_names_list","","Parse a list of names to be imported by a \\\"from\\\" import…",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"from_import_name","","Parse an import name with an optional alias in a \\\"from\\\"…",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"dotted_name","","Parse a dotted import name.",null,[[["cursor",6]],[["vec",3],["parseresult",6]]]],[5,"dots_to_int","","Parse preceding dots used to indicate parent module…",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"contract_def","","Parse a contract definition statement.",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"contract_stmt","","Parse a contract statement.",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"contract_field","","Parse a contract field definition.",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"event_def","","Parse an event definition statement.",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"event_field","","Parse an event field definition.",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"func_def","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"arg_list","","",null,[[["cursor",6]],[["parseresult",6],["vec",3]]]],[5,"arg_def","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"type_def","","Parse a type definition (type alias).",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"type_desc","","Parse a type description e.g. \\\"u256\\\" or \\\"map<address,…",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"map_type","","Parse a map type e.g. \\\"map<address, bool\\\".",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"map_type_double","","Parse a map type ending with a right-shift token.",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"map_type_single","","Parse a map type ending with a greater-than token.",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"base_type","","Parse a base type along with an optional array dimension…",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"arr_list","","Parse an array dimension list e.g. \\\"[2][3]\\\"",null,[[["cursor",6]],[["vec",3],["parseresult",6]]]],[5,"arr_dim","","Parse an array dimension e.g. \\\"[2]\\\"",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"try_from_tok","","",null,[[]]],[5,"contract_field_qual","","Parse a contract field qualifier keyword e.g. \\\"const\\\".",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"event_field_qual","","Parse an event field qualifier keyword i.e. \\\"idx\\\".",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"func_qual","","Parse a function qualifier keyword i.e. \\\"pub\\\".",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"func_stmt","","",null,[[["cursor",6]],[["parseresult",6],["vec",3]]]],[5,"simple_stmt","","",null,[[["cursor",6]],[["parseresult",6],["vec",3]]]],[5,"small_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"return_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"assert_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"emit_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"keyword_statement","","",null,[[]]],[5,"pass_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"break_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"continue_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"revert_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"vardecl_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"assign_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"augassign_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"compound_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"if_stmt_builder","","",null,[[]]],[5,"if_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"elif_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"else_block","","",null,[[["cursor",6]],[["parseresult",6],["vec",3]]]],[5,"while_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"for_stmt","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"block","","",null,[[["cursor",6]],[["parseresult",6],["vec",3]]]],[5,"exprs","","Parse a comma-separated list of expressions.",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"expr","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"bool_op_builder","","",null,[[["spanned",3],["expr",4],["token",3]],["expr",4]]],[5,"bin_op_builder","","",null,[[["spanned",3],["expr",4],["token",3]],["expr",4]]],[5,"unary_op_builder","","",null,[[["spanned",3],["token",3],["expr",4]],["expr",4]]],[5,"comp_op_builder","","",null,[[["compoperator",4],["spanned",3],["spanned",3],["expr",4]],["expr",4]]],[5,"disjunct","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"conjunct","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"comparison","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"comp_op","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"bitwise_or","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"bitwise_xor","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"bitwise_and","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"shift_expr","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"sum","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"term","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"factor","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"power","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"build_tail_expr","","",null,[[["tail",4],["spanned",3],["expr",4],["vec",3]],[["spanned",3],["expr",4]]]],[5,"primary","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"slices","","",null,[[["cursor",6]],[["parseresult",6],["vec",3]]]],[5,"slice","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"atom","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"list","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"tuple","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"group","","",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"args","","",null,[[["cursor",6]],[["parseresult",6],["vec",3]]]],[5,"kwargs","","",null,[[["cursor",6]],[["parseresult",6],["vec",3]]]],[5,"kwarg","","",null,[[["cursor",6]],[["spanned",3],["parseresult",6]]]],[5,"targets","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"target","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"t_atom","","",null,[[["cursor",6]],[["parseresult",6],["spanned",3]]]],[5,"t_tail","","",null,[[["cursor",6]],[["vec",3],["parseresult",6]]]],[5,"attr_tail","","",null,[[["cursor",6]],[["parseresult",6],["tail",4]]]],[5,"index_tail","","",null,[[["cursor",6]],[["parseresult",6],["tail",4]]]],[5,"call_tail","","",null,[[["cursor",6]],[["parseresult",6],["tail",4]]]],[0,"span","fe_parser","",null,null],[3,"Span","fe_parser::span","An exclusive span of byte offsets in a source file.",null,null],[12,"start","","A byte offset specifying the inclusive start of a span.",62,null],[12,"end","","A byte offset specifying the exclusive end of a span.",62,null],[3,"Spanned","","",null,null],[12,"node","","",63,null],[12,"span","","",63,null],[11,"new","","",62,[[]]],[11,"from_pair","","",62,[[]]],[0,"string_utils","fe_parser","",null,null],[3,"Position","fe_parser::string_utils","A position in a source file specified by a 1-indexed line…",null,null],[12,"line","","A 1-indexed line number",64,null],[12,"col","","A 0-indexed byte offset into a line",64,null],[3,"StringPositions","","Efficiently find the text positions (line, column tuples)…",null,null],[5,"lines_with_endings","","Iterate over the lines in `buf` and include line endings…",null,[[]]],[5,"lstrip_slice","","Strip the characters in the string `strip` from the left…",null,[[]]],[5,"rstrip_slice","","Strip the characters in the string `strip` from the right…",null,[[]]],[11,"new","","Create a new position counter over the string in `input`.",65,[[]]],[11,"get_pos","","Get the position at byte offset `pos_offset` in a string.",65,[[],[["option",4],["position",3]]]],[11,"get_last","","Get the last valid position in a string.",65,[[],[["option",4],["position",3]]]],[11,"get_eof","","Get the pseudo-position representing the end of the file…",65,[[],["position",3]]],[0,"tokenizer","fe_parser","A Rust port of Python\'s std lib `tokenize` module.",null,null],[0,"tokenize","fe_parser::tokenizer","",null,null],[3,"TokenizeError","fe_parser::tokenizer::tokenize","",null,null],[12,"msg","","",66,null],[12,"offset","","",66,null],[5,"tokenize","","Parse a source string into a vector of tokens.",null,[[],[["tokenizeerror",3],["result",4],["vec",3]]]],[0,"types","fe_parser::tokenizer","",null,null],[3,"Token","fe_parser::tokenizer::types","A token parsed from a source string.",null,null],[12,"typ","","The type of a token.",67,null],[12,"string","","The text content of a parsed token.",67,null],[12,"span","","The span of source text covered by a token.",67,null],[12,"line","","The text content of the line from which a token was parsed.",67,null],[4,"TokenType","","Indicates the basic syntactic element represented by a…",null,null],[13,"NAME","","",68,null],[13,"NUMBER","","",68,null],[13,"STRING","","",68,null],[13,"OP","","",68,null],[13,"COMMENT","","",68,null],[13,"INDENT","","",68,null],[13,"DEDENT","","",68,null],[13,"NEWLINE","","",68,null],[13,"NL","","",68,null],[13,"ENDMARKER","","",68,null],[13,"ERRORTOKEN","","",68,null],[6,"Cursor","fe_parser","",null,null],[6,"ParseResult","","",null,null],[11,"from","fe_parser::ast","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","fe_parser::errors","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","fe_parser::parsers","",61,[[]]],[11,"into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","fe_parser::span","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","fe_parser::string_utils","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","fe_parser::tokenizer::tokenize","",66,[[]]],[11,"into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","fe_parser::tokenizer::types","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","fe_parser::span","",62,[[["spanned",3]]]],[11,"from","","",62,[[["box",3]]]],[11,"from","","",62,[[["token",3]]]],[11,"from","","",63,[[["token",3]]]],[11,"from","","",63,[[["token",3]]]],[11,"clone","fe_parser::ast","",0,[[],["module",3]]],[11,"clone","","",7,[[],["modulestmt",4]]],[11,"clone","","",12,[[],["typedesc",4]]],[11,"clone","","",1,[[],["simpleimportname",3]]],[11,"clone","","",17,[[],["fromimportpath",4]]],[11,"clone","","",20,[[],["fromimportnames",4]]],[11,"clone","","",2,[[],["fromimportname",3]]],[11,"clone","","",21,[[],["contractstmt",4]]],[11,"clone","","",25,[[],["contractfieldqual",4]]],[11,"clone","","",3,[[],["eventfield",3]]],[11,"clone","","",26,[[],["eventfieldqual",4]]],[11,"clone","","",27,[[],["funcqual",4]]],[11,"clone","","",4,[[],["funcdefarg",3]]],[11,"clone","","",28,[[],["funcstmt",4]]],[11,"clone","","",39,[[],["expr",4]]],[11,"clone","","",51,[[],["slice",4]]],[11,"clone","","",53,[[],["callarg",4]]],[11,"clone","","",5,[[],["kwarg",3]]],[11,"clone","","",6,[[],["comprehension",3]]],[11,"clone","","",54,[[],["booloperator",4]]],[11,"clone","","",55,[[],["binoperator",4]]],[11,"clone","","",56,[[],["unaryoperator",4]]],[11,"clone","","",57,[[],["compoperator",4]]],[11,"clone","fe_parser::errors","",59,[[],["errorkind",4]]],[11,"clone","","",60,[[],["parseerror",3]]],[11,"clone","fe_parser::span","",62,[[],["span",3]]],[11,"clone","","",63,[[],["spanned",3]]],[11,"clone","fe_parser::string_utils","",64,[[],["position",3]]],[11,"clone","fe_parser::tokenizer::types","",68,[[],["tokentype",4]]],[11,"clone","","",67,[[],["token",3]]],[11,"eq","fe_parser::ast","",0,[[["module",3]]]],[11,"ne","","",0,[[["module",3]]]],[11,"eq","","",7,[[["modulestmt",4]]]],[11,"ne","","",7,[[["modulestmt",4]]]],[11,"eq","","",12,[[["typedesc",4]]]],[11,"ne","","",12,[[["typedesc",4]]]],[11,"eq","","",1,[[["simpleimportname",3]]]],[11,"ne","","",1,[[["simpleimportname",3]]]],[11,"eq","","",17,[[["fromimportpath",4]]]],[11,"ne","","",17,[[["fromimportpath",4]]]],[11,"eq","","",20,[[["fromimportnames",4]]]],[11,"ne","","",20,[[["fromimportnames",4]]]],[11,"eq","","",2,[[["fromimportname",3]]]],[11,"ne","","",2,[[["fromimportname",3]]]],[11,"eq","","",21,[[["contractstmt",4]]]],[11,"ne","","",21,[[["contractstmt",4]]]],[11,"eq","","",25,[[["contractfieldqual",4]]]],[11,"eq","","",3,[[["eventfield",3]]]],[11,"ne","","",3,[[["eventfield",3]]]],[11,"eq","","",26,[[["eventfieldqual",4]]]],[11,"eq","","",27,[[["funcqual",4]]]],[11,"eq","","",4,[[["funcdefarg",3]]]],[11,"ne","","",4,[[["funcdefarg",3]]]],[11,"eq","","",28,[[["funcstmt",4]]]],[11,"ne","","",28,[[["funcstmt",4]]]],[11,"eq","","",39,[[["expr",4]]]],[11,"ne","","",39,[[["expr",4]]]],[11,"eq","","",51,[[["slice",4]]]],[11,"ne","","",51,[[["slice",4]]]],[11,"eq","","",53,[[["callarg",4]]]],[11,"ne","","",53,[[["callarg",4]]]],[11,"eq","","",5,[[["kwarg",3]]]],[11,"ne","","",5,[[["kwarg",3]]]],[11,"eq","","",6,[[["comprehension",3]]]],[11,"ne","","",6,[[["comprehension",3]]]],[11,"eq","","",54,[[["booloperator",4]]]],[11,"eq","","",55,[[["binoperator",4]]]],[11,"eq","","",56,[[["unaryoperator",4]]]],[11,"eq","","",57,[[["compoperator",4]]]],[11,"eq","fe_parser::errors","",59,[[["errorkind",4]]]],[11,"ne","","",59,[[["errorkind",4]]]],[11,"eq","","",60,[[["parseerror",3]]]],[11,"ne","","",60,[[["parseerror",3]]]],[11,"eq","fe_parser::span","",62,[[["span",3]]]],[11,"ne","","",62,[[["span",3]]]],[11,"eq","","",63,[[["spanned",3]]]],[11,"ne","","",63,[[["spanned",3]]]],[11,"eq","fe_parser::string_utils","",64,[[["position",3]]]],[11,"ne","","",64,[[["position",3]]]],[11,"eq","fe_parser::tokenizer::tokenize","",66,[[["tokenizeerror",3]]]],[11,"ne","","",66,[[["tokenizeerror",3]]]],[11,"eq","fe_parser::tokenizer::types","",68,[[["tokentype",4]]]],[11,"eq","","",67,[[["token",3]]]],[11,"ne","","",67,[[["token",3]]]],[11,"fmt","fe_parser::ast","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","fe_parser::errors","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","fe_parser::span","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","fe_parser::string_utils","",64,[[["formatter",3]],["result",6]]],[11,"fmt","fe_parser::tokenizer::tokenize","",66,[[["formatter",3]],["result",6]]],[11,"fmt","fe_parser::tokenizer::types","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"hash","fe_parser::span","",62,[[]]],[11,"try_from","","",63,[[["token",3]],["result",4]]],[11,"try_from","","",63,[[["token",3]],["result",4]]],[11,"try_from","","",63,[[["token",3]],["result",4]]],[11,"try_from","","",63,[[["token",3]],["result",4]]],[11,"try_from","","",63,[[["token",3]],["result",4]]],[11,"try_from","","",63,[[["token",3]],["result",4]]],[11,"try_from","","",63,[[],["result",4]]],[11,"serialize","fe_parser::ast","",0,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","","",39,[[],["result",4]]],[11,"serialize","","",51,[[],["result",4]]],[11,"serialize","","",53,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",54,[[],["result",4]]],[11,"serialize","","",55,[[],["result",4]]],[11,"serialize","","",56,[[],["result",4]]],[11,"serialize","","",57,[[],["result",4]]],[11,"serialize","fe_parser::span","",62,[[],["result",4]]],[11,"serialize","","",63,[[],["result",4]]],[11,"serialize","fe_parser::string_utils","",64,[[],["result",4]]],[11,"serialize","fe_parser::tokenizer::types","",68,[[],["result",4]]],[11,"serialize","","",67,[[],["result",4]]],[11,"deserialize","fe_parser::ast","",0,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",17,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","","",39,[[],["result",4]]],[11,"deserialize","","",51,[[],["result",4]]],[11,"deserialize","","",53,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",54,[[],["result",4]]],[11,"deserialize","","",55,[[],["result",4]]],[11,"deserialize","","",56,[[],["result",4]]],[11,"deserialize","","",57,[[],["result",4]]],[11,"deserialize","fe_parser::span","",62,[[],["result",4]]],[11,"deserialize","","",63,[[],["result",4]]],[11,"deserialize","fe_parser::string_utils","",64,[[],["result",4]]],[11,"deserialize","fe_parser::tokenizer::types","",68,[[],["result",4]]],[11,"deserialize","","",67,[[],["result",4]]]],"p":[[3,"Module"],[3,"SimpleImportName"],[3,"FromImportName"],[3,"EventField"],[3,"FuncDefArg"],[3,"Kwarg"],[3,"Comprehension"],[4,"ModuleStmt"],[13,"TypeDef"],[13,"SimpleImport"],[13,"FromImport"],[13,"ContractDef"],[4,"TypeDesc"],[13,"Base"],[13,"Array"],[13,"Map"],[13,"Tuple"],[4,"FromImportPath"],[13,"Absolute"],[13,"Relative"],[4,"FromImportNames"],[4,"ContractStmt"],[13,"ContractField"],[13,"EventDef"],[13,"FuncDef"],[4,"ContractFieldQual"],[4,"EventFieldQual"],[4,"FuncQual"],[4,"FuncStmt"],[13,"Return"],[13,"VarDecl"],[13,"Assign"],[13,"AugAssign"],[13,"For"],[13,"While"],[13,"If"],[13,"Assert"],[13,"Emit"],[13,"Expr"],[4,"Expr"],[13,"Ternary"],[13,"BoolOperation"],[13,"BinOperation"],[13,"UnaryOperation"],[13,"CompOperation"],[13,"Attribute"],[13,"Subscript"],[13,"Call"],[13,"List"],[13,"ListComp"],[13,"Tuple"],[4,"Slice"],[13,"Slice"],[4,"CallArg"],[4,"BoolOperator"],[4,"BinOperator"],[4,"UnaryOperator"],[4,"CompOperator"],[8,"Alt"],[4,"ErrorKind"],[3,"ParseError"],[4,"Tail"],[3,"Span"],[3,"Spanned"],[3,"Position"],[3,"StringPositions"],[3,"TokenizeError"],[3,"Token"],[4,"TokenType"]]},\
"fe_semantics":{"doc":"Fe semantic analysis.","i":[[3,"ContractAttributes","fe_semantics","Contains contextual information relating to a contract AST…",null,null],[12,"runtime_operations","","Operations that need to be added to the runtime.",0,null],[12,"public_functions","","Public functions that have been defined by the user.",0,null],[3,"ExpressionAttributes","","Contains contextual information relating to an expression…",null,null],[12,"typ","","",1,null],[12,"location","","",1,null],[3,"FunctionAttributes","","Contains contextual information relating to a function…",null,null],[12,"name","","",2,null],[12,"param_types","","",2,null],[12,"return_type","","",2,null],[3,"Context","","Contains contextual information about a Fe module and can…",null,null],[4,"Location","","Indicates where an expression is stored.",null,null],[13,"Storage","","",3,null],[12,"index","fe_semantics::Location","",4,null],[13,"Memory","fe_semantics","",3,null],[13,"Value","","",3,null],[4,"RuntimeOperations","","Operations that need to be made available during runtime.",null,null],[13,"AbiEncode","","Encode a set of fixed sized values.",5,null],[12,"params","fe_semantics::RuntimeOperations","",6,null],[5,"analysis","fe_semantics","Performs semantic analysis of the source program and…",null,[[["module",3]],[["result",4],["semanticerror",4],["context",3]]]],[0,"errors","","Semantic errors.",null,null],[4,"SemanticError","fe_semantics::errors","Errors for things that may arise in a valid Fe AST.",null,null],[13,"MissingReturn","","",7,null],[13,"NotAnExpression","","",7,null],[13,"NotSubscriptable","","",7,null],[13,"UnassignableExpression","","",7,null],[13,"UndefinedValue","","",7,null],[12,"value","fe_semantics::errors::SemanticError","",8,null],[13,"UnexpectedReturn","fe_semantics::errors","",7,null],[13,"TypeError","","",7,null],[0,"namespace","fe_semantics","",null,null],[0,"events","fe_semantics::namespace","",null,null],[3,"Event","fe_semantics::namespace::events","",null,null],[12,"topic","","",9,null],[12,"fields","","",9,null],[5,"event_topic","","Formats the name and fields and calculates the 32 byte…",null,[[["string",3],["vec",3]],["string",3]]],[11,"new","","",9,[[["string",3],["fixedsize",4],["vec",3]]]],[0,"operations","fe_semantics::namespace","",null,null],[5,"index","fe_semantics::namespace::operations","Finds the type of an indexed expression.",null,[[["type",4]],[["result",4],["type",4],["semanticerror",4]]]],[0,"scopes","fe_semantics::namespace","",null,null],[3,"ModuleScope","fe_semantics::namespace::scopes","",null,null],[12,"defs","","",10,null],[3,"ContractScope","","",null,null],[12,"parent","","",11,null],[12,"defs","","",11,null],[12,"interface","","",11,null],[3,"FunctionScope","","",null,null],[12,"span","","",12,null],[12,"parent","","",12,null],[12,"defs","","",12,null],[4,"ModuleDef","","",null,null],[13,"Type","","",13,null],[4,"ContractDef","","",null,null],[13,"Function","","",14,null],[12,"is_public","fe_semantics::namespace::scopes::ContractDef","",15,null],[12,"params","","",15,null],[12,"returns","","",15,null],[13,"Map","fe_semantics::namespace::scopes","",14,null],[12,"index","fe_semantics::namespace::scopes::ContractDef","",16,null],[12,"map","","",16,null],[13,"Event","fe_semantics::namespace::scopes","",14,null],[4,"FunctionDef","","",null,null],[13,"Base","","",17,null],[13,"Array","","",17,null],[4,"Scope","","",null,null],[13,"Module","","",18,null],[13,"Contract","","",18,null],[13,"Function","","",18,null],[6,"Shared","","",null,null],[11,"module_scope","","",18,[[],[["modulescope",3],["shared",6]]]],[11,"new","","",10,[[],["shared",6]]],[11,"add_type_def","","",10,[[["string",3],["type",4]]]],[11,"new","","",11,[[["modulescope",3],["shared",6]],["shared",6]]],[11,"def","","",11,[[["string",3]],[["contractdef",4],["option",4]]]],[11,"add_map","","",11,[[["string",3],["map",3]]]],[11,"add_function","","",11,[[["string",3],["fixedsize",4],["vec",3]]]],[11,"add_event","","",11,[[["string",3],["event",3]]]],[11,"new","","",12,[[["shared",6],["contractscope",3],["span",3]],["shared",6]]],[11,"module_scope","","",12,[[],[["modulescope",3],["shared",6]]]],[11,"contract_scope","","",12,[[],[["shared",6],["contractscope",3]]]],[11,"contract_def","","",12,[[["string",3]],[["contractdef",4],["option",4]]]],[11,"def","","",12,[[["string",3]],[["functiondef",4],["option",4]]]],[11,"add_array","","",12,[[["string",3],["array",3]]]],[11,"add_base","","",12,[[["string",3],["base",4]]]],[0,"types","fe_semantics::namespace","",null,null],[3,"Array","fe_semantics::namespace::types","",null,null],[12,"dimension","","",19,null],[12,"inner","","",19,null],[3,"Map","","",null,null],[12,"key","","",20,null],[12,"value","","",20,null],[3,"Tuple","","",null,null],[12,"items","","",21,null],[4,"AbiPadding","","The padding on an ABI type.",null,null],[13,"Left","","The element is padded on the left with some number of bytes.",22,null],[12,"size","fe_semantics::namespace::types::AbiPadding","",23,null],[13,"Right","fe_semantics::namespace::types","The element is padded on the right with some number of…",22,null],[12,"size","fe_semantics::namespace::types::AbiPadding","",24,null],[13,"None","fe_semantics::namespace::types","There is no padding. For example, `u256` are already 32…",22,null],[4,"AbiType","","The type of an ABI element.",null,null],[13,"UniformRecursive","","Arrays are recursively encoded and consist of a single type.",25,null],[12,"child","fe_semantics::namespace::types::AbiType","",26,null],[12,"count","","",26,null],[13,"Terminal","fe_semantics::namespace::types","Single values that do not require recursive encoding.",25,null],[4,"Type","","",null,null],[13,"Base","","",27,null],[13,"Array","","",27,null],[13,"Map","","",27,null],[13,"Tuple","","",27,null],[4,"FixedSize","","",null,null],[13,"Base","","",28,null],[13,"Array","","",28,null],[13,"Tuple","","",28,null],[4,"Base","","",null,null],[13,"U256","","",29,null],[13,"Bool","","",29,null],[13,"Byte","","",29,null],[13,"Address","","",29,null],[5,"type_desc_fixed_size","","",null,[[["typedesc",4],["hashmap",3]],[["fixedsize",4],["semanticerror",4],["result",4]]]],[5,"type_desc_base","","",null,[[["typedesc",4],["hashmap",3]],[["base",4],["semanticerror",4],["result",4]]]],[5,"type_desc","","",null,[[["typedesc",4],["hashmap",3]],[["result",4],["type",4],["semanticerror",4]]]],[8,"FeSized","","The type has a constant size known to the compiler.",null,null],[10,"size","","Constant size of the type.",30,[[]]],[8,"AbiEncoding","","Information relevant to ABI encoding.",null,null],[10,"abi_name","","Name of the type as it appears in the Json ABI.",31,[[],["string",3]]],[10,"abi_size","","Size of the type with ABI encoding padding.",31,[[]]],[10,"abi_padding","","Padding on the encoded data, if any.",31,[[],["abipadding",4]]],[10,"abi_type","","ABI type, either recursive or terminal.",31,[[],["abitype",4]]],[11,"is_empty_tuple","","",27,[[]]],[11,"into_type","","",28,[[],["type",4]]],[11,"is_empty_tuple","","",28,[[]]],[11,"to_fixed_size","","",19,[[],["fixedsize",4]]],[11,"empty","","",21,[[],["tuple",3]]],[11,"is_empty","","",21,[[]]],[11,"to_fixed_size","","",21,[[],["fixedsize",4]]],[0,"test_utils","fe_semantics","",null,null],[3,"ContextHarness","fe_semantics::test_utils","",null,null],[12,"context","","",32,null],[12,"src","","",32,null],[11,"new","","",32,[[]]],[11,"add_expression","","",32,[[["expressionattributes",3]]]],[11,"add_declaration","","",32,[[["fixedsize",4]]]],[11,"to_tuple","fe_semantics","Convenience method for matching type and location.",1,[[]]],[11,"new_shared","","",33,[[],["shared",6]]],[11,"new","","",33,[[]]],[11,"add_expression","","Attribute contextual information to an expression node.",33,[[["spanned",3],["expressionattributes",3]]]],[11,"get_expression","","Get information that has been attributed to an expression…",33,[[["into",8],["span",3]],[["option",4],["expressionattributes",3]]]],[11,"add_emit","","Attribute contextual information to an emit statement node.",33,[[["spanned",3],["event",3]]]],[11,"get_emit","","Get information that has been attributed to an emit…",33,[[["into",8],["span",3]],[["event",3],["option",4]]]],[11,"add_function","","Attribute contextual information to a function definition…",33,[[["spanned",3],["functionattributes",3]]]],[11,"get_function","","Get information that has been attributed to a function…",33,[[["into",8],["span",3]],[["option",4],["functionattributes",3]]]],[11,"add_declaration","","Attribute contextual information to a declaration node.",33,[[["fixedsize",4],["spanned",3]]]],[11,"get_declaration","","Get information that has been attributed to a declaration…",33,[[["into",8],["span",3]],[["option",4],["fixedsize",4]]]],[11,"add_contract","","Attribute contextual information to a contract definition…",33,[[["contractattributes",3],["spanned",3]]]],[11,"get_contract","","Get information that has been attributed to a contract…",33,[[["into",8],["span",3]],[["contractattributes",3],["option",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","fe_semantics::errors","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","fe_semantics::namespace::events","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","fe_semantics::namespace::scopes","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","fe_semantics::namespace::types","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","fe_semantics::test_utils","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"size","fe_semantics::namespace::types","",28,[[]]],[11,"size","","",29,[[]]],[11,"size","","",19,[[]]],[11,"size","","",21,[[]]],[11,"abi_name","","",28,[[],["string",3]]],[11,"abi_size","","",28,[[]]],[11,"abi_padding","","",28,[[],["abipadding",4]]],[11,"abi_type","","",28,[[],["abitype",4]]],[11,"abi_name","","",29,[[],["string",3]]],[11,"abi_size","","",29,[[]]],[11,"abi_padding","","",29,[[],["abipadding",4]]],[11,"abi_type","","",29,[[],["abitype",4]]],[11,"abi_name","","",19,[[],["string",3]]],[11,"abi_size","","",19,[[]]],[11,"abi_padding","","",19,[[],["abipadding",4]]],[11,"abi_type","","",19,[[],["abitype",4]]],[11,"abi_name","","",21,[[],["string",3]]],[11,"abi_size","","",21,[[]]],[11,"abi_padding","","",21,[[],["abipadding",4]]],[11,"abi_type","","",21,[[],["abitype",4]]],[11,"clone","fe_semantics::namespace::events","",9,[[],["event",3]]],[11,"clone","fe_semantics::namespace::scopes","",13,[[],["moduledef",4]]],[11,"clone","","",14,[[],["contractdef",4]]],[11,"clone","","",17,[[],["functiondef",4]]],[11,"clone","","",10,[[],["modulescope",3]]],[11,"clone","","",11,[[],["contractscope",3]]],[11,"clone","","",12,[[],["functionscope",3]]],[11,"clone","fe_semantics::namespace::types","",27,[[],["type",4]]],[11,"clone","","",28,[[],["fixedsize",4]]],[11,"clone","","",29,[[],["base",4]]],[11,"clone","","",19,[[],["array",3]]],[11,"clone","","",20,[[],["map",3]]],[11,"clone","","",21,[[],["tuple",3]]],[11,"clone","fe_semantics","",3,[[],["location",4]]],[11,"clone","","",5,[[],["runtimeoperations",4]]],[11,"clone","","",0,[[],["contractattributes",3]]],[11,"clone","","",1,[[],["expressionattributes",3]]],[11,"clone","","",2,[[],["functionattributes",3]]],[11,"clone","","",33,[[],["context",3]]],[11,"default","","",33,[[],["context",3]]],[11,"eq","fe_semantics::errors","",7,[[["semanticerror",4]]]],[11,"ne","","",7,[[["semanticerror",4]]]],[11,"eq","fe_semantics::namespace::events","",9,[[["event",3]]]],[11,"ne","","",9,[[["event",3]]]],[11,"eq","fe_semantics::namespace::scopes","",13,[[["moduledef",4]]]],[11,"ne","","",13,[[["moduledef",4]]]],[11,"eq","","",14,[[["contractdef",4]]]],[11,"ne","","",14,[[["contractdef",4]]]],[11,"eq","","",17,[[["functiondef",4]]]],[11,"ne","","",17,[[["functiondef",4]]]],[11,"eq","","",10,[[["modulescope",3]]]],[11,"ne","","",10,[[["modulescope",3]]]],[11,"eq","","",11,[[["contractscope",3]]]],[11,"ne","","",11,[[["contractscope",3]]]],[11,"eq","","",12,[[["functionscope",3]]]],[11,"ne","","",12,[[["functionscope",3]]]],[11,"eq","fe_semantics::namespace::types","",27,[[["type",4]]]],[11,"ne","","",27,[[["type",4]]]],[11,"eq","","",28,[[["fixedsize",4]]]],[11,"ne","","",28,[[["fixedsize",4]]]],[11,"eq","","",29,[[["base",4]]]],[11,"eq","","",19,[[["array",3]]]],[11,"ne","","",19,[[["array",3]]]],[11,"eq","","",20,[[["map",3]]]],[11,"ne","","",20,[[["map",3]]]],[11,"eq","","",21,[[["tuple",3]]]],[11,"ne","","",21,[[["tuple",3]]]],[11,"eq","fe_semantics","",3,[[["location",4]]]],[11,"ne","","",3,[[["location",4]]]],[11,"eq","","",5,[[["runtimeoperations",4]]]],[11,"ne","","",5,[[["runtimeoperations",4]]]],[11,"eq","","",0,[[["contractattributes",3]]]],[11,"ne","","",0,[[["contractattributes",3]]]],[11,"eq","","",1,[[["expressionattributes",3]]]],[11,"ne","","",1,[[["expressionattributes",3]]]],[11,"eq","","",2,[[["functionattributes",3]]]],[11,"ne","","",2,[[["functionattributes",3]]]],[11,"fmt","fe_semantics::errors","",7,[[["formatter",3]],["result",6]]],[11,"fmt","fe_semantics::namespace::events","",9,[[["formatter",3]],["result",6]]],[11,"fmt","fe_semantics::namespace::scopes","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","fe_semantics::namespace::types","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","fe_semantics","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]]],"p":[[3,"ContractAttributes"],[3,"ExpressionAttributes"],[3,"FunctionAttributes"],[4,"Location"],[13,"Storage"],[4,"RuntimeOperations"],[13,"AbiEncode"],[4,"SemanticError"],[13,"UndefinedValue"],[3,"Event"],[3,"ModuleScope"],[3,"ContractScope"],[3,"FunctionScope"],[4,"ModuleDef"],[4,"ContractDef"],[13,"Function"],[13,"Map"],[4,"FunctionDef"],[4,"Scope"],[3,"Array"],[3,"Map"],[3,"Tuple"],[4,"AbiPadding"],[13,"Left"],[13,"Right"],[4,"AbiType"],[13,"UniformRecursive"],[4,"Type"],[4,"FixedSize"],[4,"Base"],[8,"FeSized"],[8,"AbiEncoding"],[3,"ContextHarness"],[3,"Context"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);